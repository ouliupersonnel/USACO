/* Use the slash-star style comments or the system won't see your
   identification information */
/*
ID: ou.liu.1
LANG: JAVA
PROG: milk2
*/
import java.io.*;
import java.util.*;

class milk2 {
  public static class Range implements Comparable<Range>{
    public int start;
    public int end;
    public Range(int start, int end) {
      this.start = start;
      this.end = end;
    }
    @Override
    public int compareTo(Range rhs) {
      return this.start - rhs.start;
    }
  }
  public static void main (String [] args) throws IOException {
    // Use BufferedReader rather than RandomAccessFile; it's much faster
    BufferedReader f = new BufferedReader(new FileReader("milk2.in"));
                                                  // input file name goes above
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("milk2.out")));

    int N = Integer.parseInt(f.readLine());
    Range ranges[] = new Range[N];

    int max_end = 0; int min_start = 1000000 + 1;
    for (int i = 0; i < N; ++i){
      StringTokenizer st = new StringTokenizer(f.readLine());
      ranges[i] = new Range(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
      if (ranges[i].end > max_end) max_end = ranges[i].end;
      if (ranges[i].start < min_start) min_start = ranges[i].start;
    }
    Arrays.sort(ranges);

    Boolean seconds[] = new Boolean[1000000 + 1];
for (int i = min_start; i < max_end; i++)
                seconds[i] = false;

            int le = 0;
            for (int i = 0; i < N; ++i)
            {
                Range range = ranges[i];
                if (range.start < le)
                {
                    if (range.end > le)
                    {
                        for (int j = le; j < range.end; ++j)
                            seconds[j] = true;
                        le = range.end;
                    }
                }
                else
                {
                    le = range.end;
                    for (int j = range.start; j < range.end; ++j)
                        seconds[j] = true;
                }
            }


            int mf = 0, mi = 0;
            Boolean inIdle = true; int feed = 0, idle = 0;
            for (int i = min_start; i < max_end; ++i)
            {
                if (seconds[i])
                {
                    if (inIdle)
                    {
                        inIdle = false;
                        if (idle > mi) mi = idle;
                        idle = feed = 0;
                    }
                    ++feed;
                }
                else
                {
                    if (!inIdle)
                    {
                        inIdle = true;
                        if (feed > mf) mf = feed;
                        feed = idle = 0;
                    }
                    ++idle;
                }
            }
            int xx = 0;
            if (idle > mi) mi = idle;
            if (feed > mf) mf = feed;    out.println((mf) + " " + (mi));                           // output result
    out.close();                                  // close the output file


  }
}